pipeline {
    agent any
    environment {
        IMAGE_NAME = "python-nginx-vms"
        ARTIFACT_REPO = "us-central1-docker.pkg.dev/mythic-inn-420620/my-docker-repo1"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp')
    }
    stages {

        stage("pull the code"){
            steps{
            git url: "https://github.com/sgandeplli/-docker-pipe-2vms.git" , branch: "main"
            }
        }
        stage("Docker Hub Connection") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', 
                                                  usernameVariable: 'DOCKER_USER', 
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }

        stage("Google Cloud Login") {
            steps {
                sh '''
                gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                gcloud auth configure-docker us-central1-docker.pkg.dev
                '''
            }
        }

        stage("Run Docker Compose") {
            steps {
                sh '''
                docker compose build
                '''
            }
        }
        stage ("terraform  create instance"){
         steps{
             sh '''

                 terraform init
                 terraform plan
                terraform apply --auto-approve
'''


         }

        }

        stage("Docker Tags & Push (Python App)") {
            steps {
                sh '''
                docker tag pyweb1 ganesh6498/pyweb1:${BUILD_NUMBER}
                docker push ganesh6498/pyweb1:${BUILD_NUMBER}

                docker tag pyweb1 ${ARTIFACT_REPO}/${IMAGE_NAME}-pyweb1:${BUILD_NUMBER}
                docker push ${ARTIFACT_REPO}/${IMAGE_NAME}-pyweb1:${BUILD_NUMBER}
                '''
            }
        }

        stage("Docker Tags & Push (Web App)") {
            steps {
                sh '''
                docker tag web2 ganesh6498/web2:${BUILD_NUMBER}
                docker push ganesh6498/web2:${BUILD_NUMBER}

                docker tag web2 ${ARTIFACT_REPO}/${IMAGE_NAME}-web2:${BUILD_NUMBER}
                docker push ${ARTIFACT_REPO}/${IMAGE_NAME}-web2:${BUILD_NUMBER}
                '''
            }
        }
       stage ("check connection"){
       steps{
        sh '''
            ansible-inventory --graph
            
            '''
       }
       }
       stage (" ping ansible"){
           steps{
           sh ''' 
                  sleep 10
              ansible all -m ping
              '''
            }
       }
  

        stage("Ansible Deployment") {
            steps {
                sh '''
                ansible-playbook ansibleplay.yml -e build_number=$BUILD_NUMBER
                '''
            }
        }
    }
}

